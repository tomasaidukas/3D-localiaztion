clear all
close all

%------------------------------------------------------------%
% Load simulation data
%------------------------------------------------------------%
img = load('rand.mat');
img = img.finalimg;
img180 = load('randC.mat');
img180 = img180.finalimg180;
original = load('randO.mat');
original = original.original;
imgDH = load('randDH.mat');
imgDH = imgDH.finalimgDH;
NOISE = 0.0006;
sigmaRange = 10:15;

% figure; imshow(img, [])
% figure; imshow(imgDH, [])

%------------------------------------------------------------%
% Parameters used to generate the canvas for PSF storage
%------------------------------------------------------------%
W20 = 0:0.1:5; 
maxDefocus = size(W20, 2);
% Data used to simulate the PSF mesh
NoPts = 870;
XYrange = 2; % from -7.5 mm to 7.5 mm => 15 mm aperture
R = 1; % 3 mm           
ratio = R / XYrange;
% % % NOISE = 0.00001 % 0.00001 perfect for the no noise image
% % NOISE = 0.0005;

%------------------------------------------------------------%
% Parameters used to simulate the true camera and calculate depth
%------------------------------------------------------------%
NA = 1.4;
Mag = 100;
L = 200; % 200 mm
n = 1.5150; % oil refractive index

% NA = 0.75;
% Mag = 40;
% n = 1;
% L = 200;

% tan(T) = R / F     ->    NA = n * sin(T)   and    F = L / M
f = L / Mag;
Radius = f * tan(asin(NA / n)); % in mm
% This radius represents the fully opened aperture radius
% The simulation has a smaller aperture given by the "ratio" parameter.
% Simply by changing the ratio I can manipulate the aperture size and keep
% everything consistent.
% Radius = Radius * ratio;

diameter = (Radius * 2);
fnumber = f / diameter;
distLong = 7.7; % 3 microns
lambda = 0.54; % 540 nm in microns
% W20 = distLong / (8 * fnumber.^2 * lambda) % defocus in terms of waves
distLong = 3 * (8 * fnumber.^2 * lambda) % defocus in terms of waves

camera = {W20; maxDefocus; NoPts; XYrange; R; f};

deviation = 3;

% simulateDHPSF(NoPts, XYrange, R, 0);
% simulateDHPSF(NoPts, XYrange, R, deviation);
% 
% [ref, ref180] = CPMpsf(XYrange, NoPts, R, 0);
% [rof, rof180] = CPMpsf(XYrange, NoPts, R, deviation);
% figure; imshowpair(ref, rof)

%------------------------------------------------------------%
% Generates depth maps for CKM and DH-PSF.
%------------------------------------------------------------%
% [PSFs, angles, W20fit] = DHPSFmap(camera);
% angles = load('./DHPSFdata/angles.mat'); angles = angles.angles;
% PSFs = load('./DHPSFdata/templates.mat'); PSFs = PSFs.PSFs;
% W20fit = load('./DHPSFdata/ang2defocus.mat'); angle2defocus = W20fit.W20fit;

% [dist, defoc] = CKMmap(camera, NOISE);      % Problem with this method is the available precision. At very small defocus the distance is not measurable even by interpolating the image to make it 20 times larger.

% Crop size does not matter - interpolation does, hence select a lot of
% points.
[dist, defoc] = CKMmap2(camera, NOISE);    % This method is sensitive to noise and the SNR parameter used for deconvolution. This leads to a distorted deconvolved points with some systematic errors and the centroid(found by Gaussian fitting) vary slightly - especially for small defocus values. So, if incorrect method is used to deconvolve the points, the obtained results are not very precise.
asdasd
%------------------------------------------------------------%
% DH-PSF localisation.
%------------------------------------------------------------%
% Load up the reference vector according to which the angles were
% measured. This vector corresponds to the angle at 0 defocus and is a
% unit vetor.
[DHPSF2D, depthDHPSF, Xdhpsf Ydhpsf] = ...
                    DHPSF(imgDH, angles, PSFs, angle2defocus);

%------------------------------------------------------------%
% CKM localisation.
%------------------------------------------------------------%
camera = {0:0.6:2; maxDefocus; NoPts; XYrange; R; f};
% Get the approximate point locations
[imgCKM1, mapCKM1] = CKM(img, img180, camera, sigmaRange, NOISE);
                       
% depths = correlationDepthCKM(img, img180, imgCKM1, camera)
% camera = {depths; maxDefocus; NoPts; XYrange; R; f};
% [imgCKM, mapCKM] = CKM(img, img180, camera, sigmaRange, NOISE);
% [CKM3D, CKM2D, depthCKM, Xckm, Yckm] = localCKM(mapCKM, imgCKM, depths);


% optimize if it works well (pull out the psf calc before the loop)
depths = deconvDepthCKM(img, img180, mapCKM1, imgCKM1, camera, NOISE)
camera = {depths; maxDefocus; NoPts; XYrange; R; f};
[imgCKM, mapCKM] = CKM(img, img180, camera, sigmaRange, NOISE);
[CKM3D, CKM2D, depthCKM2, Xckm, Yckm] = localCKM(mapCKM, imgCKM, depths);

%------------------------------------------------------------%
% Visualize
%------------------------------------------------------------%
originalBW = imregionalmax(original); [row, col] = find(originalBW);
figure; imshow(original, [])
        hold on; plot(col, row, '.r')
        hold on; plot(Xckm, Yckm, '.b')
        hold on; plot(Xdhpsf, Ydhpsf, '.g')

%------------------------------------------------------------%
% Display depth values to check 3D localisation
%------------------------------------------------------------%
% depthCKM
depthCKM2
depthDHPSF